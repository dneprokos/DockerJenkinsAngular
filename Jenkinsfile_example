pipeline {
  agent any
  triggers {
    pollSCM('* * * * *') /* validate repository once per mniute and pull if there is changes */
  }
  environment { 
    ADMIN_NAME = 'Kostiantyn Teltov' /* variables on pipeline level */
    BUILD_NUMBER = 'env.BUILD_NUMBER' /* https://opensource.triology.de/jenkins/pipeline-syntax/globals */
  }
  options {
    disableConcurrentBuilds() /* Disallow concurrent executions of the Pipeline. 
    Can be useful for preventing simultaneous accesses to shared resources, etc */
    retry(1) /* On failure, retry the entire Pipeline the specified number of times. */
    skipStagesAfterUnstable() /* Skip stages once the build status has gone to UNSTABLE. */
    timeout(time: 30, unit: 'MINUTES') /* Set a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline. */
    timestamps() /* Prepend all console output generated by the Pipeline run with the time at which the line was emitted. */  
  }
  parameters {
    string(name: 'PERSON', defaultValue: "Mr ADMIN", description: 'Who should I say goodbye to?')
  } /* A few other data types can be used for the parameters. Please find reference here: https://jenkins.io/doc/book/pipeline/syntax/ */
  stages {
    stage('Pre-cleanup') {
      steps{
        echo "Remove docker containers"
        sh 'docker system prune -af'
        sh 'docker image ls -a'
      }
    }
    stage('Build/Deploy') {
      options { /* You may also define options per stage. But it has limited amount of supported methods */
        timeout(time: 15, unit: 'MINUTES')
      }
      steps {
        echo 'Start deployment'
        sh 'docker-compose up -d'
      }
    }
    stage('Run e2e tests') {
      environment { 
        TEST_TYPES = 'e2e' /* variables on pipeline stage level */
      }
      steps {
        echo "Starting to run ${TEST_TYPES} tests"
      }
    }
    stage('Deploy to production') {
      when {
        beforeInput true
        branch 'master'
      }
      input {
        message "Should we deploy on production?"
        ok "Deploy!"
      }
      steps {
        echo 'Start deployment to Production'
      }
    }
  }
  post {
        always {
            echo "This is Always post step example. Thanks for using Jenkins. Goodbye ${params.PERSON}"          
        }
        success {
            echo 'This is example of sucess step'
        }
        failure {
            echo 'This is example of failure step'
            mail to: 'dneprokos@gmail.com.com',
             subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
             body: "Something is wrong with ${env.BUILD_URL}"
        }
        cleanup {
            echo "Hello ${ADMIN_NAME}. We are starting to cleanup workspace for build number ${BUILD_NUMBER}."
            sh 'docker-compose down'
            sh 'docker system prune -af'
            deleteDir()
        }
  } /* Pipeline may contain a lot of other post steps. Please find reference here: https://jenkins.io/doc/book/pipeline/syntax/ */
}